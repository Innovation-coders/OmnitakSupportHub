@model OmnitakSupportHub.Controllers.MergedManagerDashboardViewModel
@{
    ViewData["Title"] = "Manager Dashboard";
    Layout = null; // Custom layout for full control
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Omnitak Support Hub</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>
    <style>
        :root {
            /* Premium Enterprise Color Palette */
            --primary-deep-blue: #0F1419;
            --primary-navy: #1A237E;
            --accent-electric: #00E5FF;
            --accent-purple: #7B2CBF;
            --accent-gold: #FFB300;
            --accent-success: #4CAF50;
            --accent-warning: #FF9800;
            --accent-danger: #F44336;
            --surface-dark: #121212;
            --surface-elevated: #1E1E1E;
            --surface-card: #242424;
            --surface-glass: rgba(255, 255, 255, 0.05);
            --text-primary: #FFFFFF;
            --text-secondary: rgba(255, 255, 255, 0.7);
            --text-muted: rgba(255, 255, 255, 0.5);
            --gradient-primary: linear-gradient(135deg, #0F1419 0%, #1A237E 50%, #7B2CBF 100%);
            --gradient-accent: linear-gradient(45deg, #00E5FF, #7B2CBF);
            --gradient-card: linear-gradient(135deg, #1E1E1E 0%, #242424 100%);
            --shadow-glow: 0 0 40px rgba(0, 229, 255, 0.3);
            --shadow-deep: 0 25px 50px -12px rgba(0, 0, 0, 0.8);
            --shadow-card: 0 8px 32px rgba(0, 0, 0, 0.3);
            --border-glow: rgba(0, 229, 255, 0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--primary-deep-blue);
            color: var(--text-primary);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Animated Background */
        .background-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--gradient-primary);
            z-index: -2;
        }

            .background-container::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: radial-gradient(circle at 20% 80%, rgba(0, 229, 255, 0.3) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(123, 44, 191, 0.3) 0%, transparent 50%), radial-gradient(circle at 40% 40%, rgba(255, 179, 0, 0.2) 0%, transparent 50%);
                animation: backgroundFlow 20s ease-in-out infinite;
            }

        .floating-orbs {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        .orb {
            position: absolute;
            border-radius: 50%;
            background: var(--gradient-accent);
            opacity: 0.1;
            animation: floatOrb 20s infinite ease-in-out;
        }

            .orb:nth-child(1) {
                width: 200px;
                height: 200px;
                top: 20%;
                left: 10%;
                animation-delay: 0s;
            }

            .orb:nth-child(2) {
                width: 150px;
                height: 150px;
                top: 60%;
                right: 20%;
                animation-delay: 7s;
            }

            .orb:nth-child(3) {
                width: 100px;
                height: 100px;
                bottom: 20%;
                left: 70%;
                animation-delay: 14s;
            }

        @@keyframes backgroundFlow {
            0%, 100%

        {
            opacity: 1;
            transform: scale(1) rotate(0deg);
        }

        50% {
            opacity: 0.8;
            transform: scale(1.05) rotate(2deg);
        }

        }

        @@keyframes floatOrb {
            0%, 100%

        {
            transform: translate(0, 0) scale(1);
        }

        33% {
            transform: translate(30px, -30px) scale(1.1);
        }

        66% {
            transform: translate(-20px, 20px) scale(0.9);
        }

        }

        /* Dashboard Container - YOUR ORIGINAL */
        .dashboard-container {
            display: flex;
            min-height: 100vh;
            position: relative;
            z-index: 1;
        }

        /* Sidebar - YOUR ORIGINAL */
        .sidebar {
            width: 280px;
            background: var(--gradient-card);
            border-right: 1px solid var(--border-glow);
            backdrop-filter: blur(20px);
            box-shadow: var(--shadow-card);
            display: flex;
            flex-direction: column;
            padding: 32px 0;
            position: fixed;
            height: 100vh;
            z-index: 100;
            transition: transform 0.3s ease;
        }

        .sidebar-header {
            padding: 0 32px;
            margin-bottom: 40px;
            text-align: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 32px;
        }

        .sidebar-logo {
            width: 64px;
            height: 64px;
            background: var(--gradient-accent);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: 800;
            color: white;
            margin: 0 auto 16px;
            box-shadow: var(--shadow-glow);
            animation: pulse 3s infinite;
        }

        @@keyframes pulse {
            0%, 100%

        {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }

        }

        .sidebar-title {
            font-size: 20px;
            font-weight: 700;
            background: var(--gradient-accent);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 8px;
        }

        .sidebar-subtitle {
            font-size: 14px;
            color: var(--text-muted);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        /* Navigation Menu  */
        .nav-menu {
            list-style: none;
            padding: 0 24px;
            flex: 1;
        }

        .nav-item {
            margin-bottom: 8px;
            animation: slideInLeft 1s ease;
            animation-delay: calc(var(--delay) * 0.1s);
            animation-fill-mode: both;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            color: var(--text-secondary);
            text-decoration: none;
            border-radius: 12px;
            transition: all 0.3s ease;
            font-weight: 500;
            position: relative;
            overflow: hidden;
        }

            .nav-link:hover {
                color: var(--text-primary);
                background: var(--surface-glass);
                transform: translateX(8px);
                box-shadow: 0 4px 20px rgba(0, 229, 255, 0.2);
            }

            .nav-link.active {
                background: var(--gradient-accent);
                color: white;
                box-shadow: var(--shadow-glow);
            }

        .nav-icon {
            font-size: 18px;
            margin-right: 12px;
            width: 24px;
            text-align: center;
        }

        /* Logout Section */
        .logout-section {
            margin-top: auto;
            padding: 32px 24px 0;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .logout-btn {
            width: 100%;
            padding: 16px;
            background: linear-gradient(135deg, #F44336 0%, #D32F2F 100%);
            border: none;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

            .logout-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(244, 67, 54, 0.4);
            }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 32px;
            background: rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            min-height: 100vh;
        }

        .content-header {
            margin-bottom: 40px;
            animation: slideInRight 1s ease;
        }

        .welcome-section h1 {
            font-size: 36px;
            font-weight: 800;
            background: var(--gradient-accent);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 8px;
        }

        .welcome-section p {
            font-size: 18px;
            color: var(--text-secondary);
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 24px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: var(--gradient-card);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 32px;
            position: relative;
            overflow: hidden;
            transition: all 0.4s ease;
            animation: fadeInUp 1s ease;
            animation-delay: calc(var(--delay) * 0.2s);
            animation-fill-mode: both;
        }

            .stat-card:hover {
                transform: translateY(-8px);
                box-shadow: var(--shadow-card);
                border-color: var(--accent-electric);
            }

            .stat-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: var(--gradient-accent);
            }

        .stat-icon {
            font-size: 32px;
            color: var(--accent-electric);
            margin-bottom: 16px;
        }

        .stat-number {
            font-size: 48px;
            font-weight: 800;
            color: var(--text-primary);
            line-height: 1;
            margin-bottom: 8px;
        }

        .stat-label {
            font-size: 14px;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 600;
            margin-bottom: 12px;
        }

        .stat-trend {
            display: flex;
            align-items: center;
            font-size: 12px;
            font-weight: 600;
        }

        .trend-up {
            color: var(--accent-success);
        }

        .trend-down {
            color: var(--accent-danger);
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 16px;
            margin-bottom: 32px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 16px 24px;
            border-radius: 12px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: var(--gradient-accent);
            color: white;
            box-shadow: var(--shadow-glow);
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 0 40px rgba(0, 229, 255, 0.5);
            }

        .btn-secondary {
            background: var(--surface-elevated);
            color: var(--text-primary);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

            .btn-secondary:hover {
                background: var(--surface-card);
                border-color: var(--accent-electric);
            }

        /* Content Cards */
        .content-card {
            background: var(--gradient-card);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            margin-bottom: 32px;
            overflow: hidden;
            animation: fadeInUp 1.2s ease;
        }

        .card-header {
            background: linear-gradient(135deg, var(--accent-electric) 0%, var(--accent-purple) 100%);
            padding: 24px 32px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card-title {
            font-size: 20px;
            font-weight: 700;
            color: white;
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .card-content {
            padding: 32px;
        }

        /* Tables */
        .modern-table {
            width: 100%;
            border-collapse: collapse;
            background: transparent;
        }

            .modern-table th {
                background: rgba(255, 255, 255, 0.05);
                color: var(--text-primary);
                padding: 16px;
                text-align: left;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                font-size: 14px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }

            .modern-table td {
                padding: 16px;
                color: var(--text-secondary);
                border-bottom: 1px solid rgba(255, 255, 255, 0.05);
                transition: all 0.3s ease;
            }

            .modern-table tr:hover td {
                background: rgba(255, 255, 255, 0.05);
                color: var(--text-primary);
            }

        /* Priority Badges */
        .priority-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .priority-high {
            background: rgba(244, 67, 54, 0.2);
            color: var(--accent-danger);
        }

        .priority-medium {
            background: rgba(255, 152, 0, 0.2);
            color: var(--accent-warning);
        }

        .priority-low {
            background: rgba(76, 175, 80, 0.2);
            color: var(--accent-success);
        }

        /* Charts Section */
        .charts-section {
            margin-bottom: 32px;
        }

        .charts-toggle {
            text-align: center;
            margin-bottom: 24px;
        }

        .toggle-charts-btn {
            background: var(--surface-elevated);
            color: var(--text-secondary);
            border: 1px solid var(--border-glow);
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

            .toggle-charts-btn.active {
                background: var(--gradient-accent);
                color: white;
                border-color: transparent;
            }

        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }

        .chart-card {
            background: var(--gradient-card);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 24px;
            transition: all 0.3s ease;
        }

            .chart-card:hover {
                transform: translateY(-4px);
                box-shadow: var(--shadow-card);
            }

        .chart-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 20px;
            text-align: center;
        }

        .chart-container {
            position: relative;
            height: 300px;
        }

        .chart-large {
            height: 400px;
        }

        /* Mobile Responsive */
        .mobile-menu-btn {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: var(--gradient-accent);
            border: none;
            border-radius: 12px;
            padding: 12px;
            color: white;
            cursor: pointer;
            font-size: 20px;
            box-shadow: var(--shadow-glow);
        }

        @@keyframes slideInLeft {
            from

        {
            opacity: 0;
            transform: translateX(-30px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }

        }

        @@keyframes slideInRight {
            from

        {
            opacity: 0;
            transform: translateX(30px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }

        }

        @@keyframes fadeInUp {
            from

        {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        /* Responsive Design */
        @@media (max-width: 1024px) {
            .sidebar

        {
            transform: translateX(-100%);
            z-index: 1000;
        }

        .sidebar.open {
            transform: translateX(0);
        }

        .main-content {
            margin-left: 0;
        }

        .stats-grid {
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        }

        .mobile-menu-btn {
            display: block;
        }

        }

        @@media (max-width: 768px) {
            .main-content

        {
            padding: 16px;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
        }

        .welcome-section h1 {
            font-size: 28px;
        }

        .charts-grid {
            grid-template-columns: 1fr;
        }

        }
    </style>
</head>
<body>
    <!-- Animated Background -->
    <div class="background-container">
        <div class="floating-orbs">
            <div class="orb"></div>
            <div class="orb"></div>
            <div class="orb"></div>
        </div>
    </div>

    <!-- Mobile Menu Button -->
    <button class="mobile-menu-btn" onclick="toggleSidebar()">
        <i class="bi bi-list"></i>
    </button>

    <div class="dashboard-container">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="sidebar-logo">O</div>
                <h3 class="sidebar-title">Manager Hub</h3>
                <p class="sidebar-subtitle">Command Center</p>
            </div>

            <nav>
                <ul class="nav-menu">
                    <li class="nav-item" style="--delay: 1">
                        <a href="#" class="nav-link active">
                            <i class="nav-icon bi bi-speedometer2"></i>
                            Dashboard
                        </a>
                    </li>
                    <li class="nav-item" style="--delay: 2">
                        <a asp-controller="Ticket" asp-action="Create" class="nav-link">
                            <i class="nav-icon bi bi-plus-circle"></i>
                            Create Ticket
                        </a>
                    </li>
                    <li class="nav-item" style="--delay: 3">
                        <a href="#" class="nav-link" onclick="toggleFilters()">
                            <i class="nav-icon bi bi-funnel"></i>
                            Filter Tickets
                        </a>
                    </li>
                    <li class="nav-item" style="--delay: 4">
                        <a href="#" class="nav-link" onclick="toggleCharts()">
                            <i class="nav-icon bi bi-graph-up"></i>
                            Analytics
                        </a>
                    </li>
                    <li class="nav-item" style="--delay: 5">
                        <a asp-controller="SupportTeam" asp-action="Index" class="nav-link">
                            <i class="nav-icon bi bi-people"></i>
                            Team Management
                        </a>
                    </li>
                    <li class="nav-item" style="--delay: 6">
                        <a href="#" class="nav-link">
                            <i class="nav-icon bi bi-gear"></i>
                            Settings
                        </a>
                    </li>
                </ul>
            </nav>

            <div class="logout-section">
                <form asp-controller="Account" asp-action="Logout" method="post">
                    <button type="submit" class="logout-btn">
                        <i class="bi bi-box-arrow-right"></i>
                        Logout
                    </button>
                </form>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <div class="content-header">
                <div class="welcome-section">
                    <h1>Manager Dashboard</h1>
                    <p>Welcome back! Here's what's happening with your support operations.</p>
                </div>
            </div>

            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card" style="--delay: 1">
                    <div class="stat-icon">
                        <i class="bi bi-ticket-detailed"></i>
                    </div>
                    <div class="stat-number">@Model.TotalTickets</div>
                    <div class="stat-label">Total Tickets</div>
                    <div class="stat-trend trend-up">
                        <i class="bi bi-arrow-up"></i> Active period
                    </div>
                </div>

                <div class="stat-card" style="--delay: 2">
                    <div class="stat-icon">
                        <i class="bi bi-exclamation-triangle"></i>
                    </div>
                    <div class="stat-number">@(Model?.GroupedTickets?.SelectMany(g => g).Where(t => t.Priority?.PriorityName == "High").Count() ?? 0)</div>
                    <div class="stat-label">High Priority</div>
                    <div class="stat-trend trend-down">
                        <i class="bi bi-arrow-down"></i> 8% from yesterday
                    </div>
                </div>

                <div class="stat-card" style="--delay: 3">
                    <div class="stat-icon">
                        <i class="bi bi-person-check"></i>
                    </div>
                    <div class="stat-number">@(Model?.GroupedTickets?.SelectMany(g => g).Where(t => t.AssignedTo != null).Count() ?? 0)</div>
                    <div class="stat-label">Assigned Tickets</div>
                    <div class="stat-trend trend-up">
                        <i class="bi bi-arrow-up"></i> 5% efficiency gain
                    </div>
                </div>

                <div class="stat-card" style="--delay: 4">
                    <div class="stat-icon">
                        <i class="bi bi-clock"></i>
                    </div>
                    <div class="stat-number">@Model.GetResolutionTimeFormatted()</div>
                    <div class="stat-label">Avg Response Time</div>
                    <div class="stat-trend trend-up">
                        <i class="bi bi-arrow-up"></i> 15% faster
                    </div>
                </div>
            </div>

            <!-- Action Buttons  -->
            <div class="action-buttons">
                <a asp-controller="Ticket" asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i>
                    Create New Ticket
                </a>
                <button class="btn btn-secondary" onclick="toggleFilters()">
                    <i class="bi bi-funnel"></i>
                    Filter View
                </button>
                <button class="btn btn-secondary" onclick="toggleCharts()">
                    <i class="bi bi-bar-chart"></i>
                    Analytics View
                </button>
            </div>

            <!-- Charts Section (Hidden by default) -->
            <div id="chartsSection" class="charts-section" style="display: none;">
                <div class="content-card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="bi bi-graph-up"></i>
                            Analytics Dashboard
                        </h3>
                    </div>
                    <div class="card-content">
                        <div class="charts-grid">
                            <!-- Ticket Volume Chart -->
                            <div class="chart-card">
                                <h4 class="chart-title">📈 Ticket Volume Trend</h4>
                                <div class="chart-container">
                                    <canvas id="volumeChart"></canvas>
                                </div>
                            </div>

                            <!-- Category Distribution -->
                            <div class="chart-card">
                                <h4 class="chart-title">🎯 Category Distribution</h4>
                                <div class="chart-container">
                                    <canvas id="categoryChart"></canvas>
                                </div>
                            </div>

                            <!-- Agent Workload -->
                            <div class="chart-card">
                                <h4 class="chart-title">👥 Agent Workload</h4>
                                <div class="chart-container">
                                    <canvas id="workloadChart"></canvas>
                                </div>
                            </div>

                            <!-- SLA Performance -->
                            <div class="chart-card">
                                <h4 class="chart-title">🎯 SLA Performance</h4>
                                <div class="chart-container">
                                    <canvas id="slaChart"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Resolution Trend (Full Width) -->
                        <div class="chart-card">
                            <h4 class="chart-title">⚡ Resolution Time & SLA Compliance</h4>
                            <div class="chart-container chart-large">
                                <canvas id="resolutionChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tickets by Category -->
            @if (Model.GroupedTickets.Any())
            {
                @foreach (var group in Model.GroupedTickets)
                {
                    <div class="content-card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="bi bi-folder"></i>
                                @group.Key.CategoryName (@group.Count() tickets)
                            </h3>
                        </div>
                        <div class="card-content">
                            <table class="modern-table">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Priority</th>
                                        <th>Status</th>
                                        <th>Created By</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ticket in group.Take(10))
                                    {
                                        <tr>
                                            <td>@ticket.Title</td>
                                            <td>
                                                <span class="priority-badge priority-@(ticket.Priority?.PriorityName?.ToLower() ?? "low")">
                                                    @ticket.Priority?.PriorityName
                                                </span>
                                            </td>
                                            <td>@ticket.Status?.StatusName</td>
                                            <td>@ticket.CreatedByUser?.FullName</td>
                                            <td>@ticket.CreatedAt.ToString("MMM dd, HH:mm")</td>
                                            <td>
                                                <a asp-controller="Ticket" asp-action="Details" asp-route-id="@ticket.TicketID"
                                                   class="btn btn-secondary" style="padding: 6px 12px; font-size: 12px;">
                                                    View
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            @if (group.Count() > 10)
                            {
                                <div style="text-align: center; margin-top: 20px; color: var(--text-muted);">
                                    <em>Showing 10 of @group.Count() tickets. <a href="#" style="color: var(--accent-electric);">View All</a></em>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="content-card">
                    <div class="card-content" style="text-align: center; padding: 60px;">
                        <i class="bi bi-inbox" style="font-size: 64px; color: var(--text-muted); margin-bottom: 24px; display: block;"></i>
                        <h3 style="color: var(--text-secondary); margin-bottom: 16px;">No Tickets Found</h3>
                        <p style="color: var(--text-muted); margin-bottom: 24px;">All tickets have been resolved or there are no tickets in the selected date range.</p>
                        <a asp-controller="Ticket" asp-action="Create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i>
                            Create First Ticket
                        </a>
                    </div>
                </div>
            }

            <!-- Available Agents Section - YOUR ORIGINAL -->
            @if (Model.AvailableAgents?.Any() == true)
            {
                <div class="content-card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="bi bi-people"></i>
                            Available Agents (@Model.AvailableAgents.Count agents ready)
                        </h3>
                    </div>
                    <div class="card-content">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
                            @foreach (var agent in Model.AvailableAgents)
                            {
                                <div style="background: var(--surface-elevated); padding: 20px; border-radius: 12px; border-left: 4px solid var(--accent-electric);">
                                    <h4 style="color: var(--text-primary); margin-bottom: 8px;">@agent.FullName</h4>
                                    <p style="color: var(--text-secondary); margin-bottom: 12px;">
                                        @agent.AssignedTickets.Count active tickets
                                    </p>
                                    <div style="background: var(--surface-dark); height: 8px; border-radius: 4px; overflow: hidden;">
                                        <div style="background: var(--gradient-accent); height: 100%; width: @(agent.AssignedTickets.Count * 20)%; transition: width 0.3s ease;"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Filter Panel (Hidden by default) - YOUR ORIGINAL -->
            <div id="filterPanel" style="display: none;">
                <div class="content-card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="bi bi-funnel"></i>
                            Filter Tickets
                        </h3>
                    </div>
                    <div class="card-content">
                        <form method="get" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; align-items: end;">
                            <div>
                                <label style="display: block; margin-bottom: 8px; color: var(--text-primary); font-weight: 600;">Start Date</label>
                                <input type="date" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")"
                                       style="width: 100%; padding: 12px; background: var(--surface-elevated); border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; color: var(--text-primary);">
                            </div>
                            <div>
                                <label style="display: block; margin-bottom: 8px; color: var(--text-primary); font-weight: 600;">End Date</label>
                                <input type="date" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")"
                                       style="width: 100%; padding: 12px; background: var(--surface-elevated); border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; color: var(--text-primary);">
                            </div>
                            <div>
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-search"></i>
                                    Apply Filters
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            @await Html.PartialAsync("_UnassignedTickets")
        </main>
    </div>

    <script>
        // YOUR ORIGINAL JAVASCRIPT FUNCTIONS
        let chartsLoaded = false;
        let charts = {};

        // Mobile sidebar toggle - YOUR ORIGINAL
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('open');
        }

        // Filter panel toggle - YOUR ORIGINAL
        function toggleFilters() {
            const filterPanel = document.getElementById('filterPanel');
            if (filterPanel.style.display === 'none' || filterPanel.style.display === '') {
                filterPanel.style.display = 'block';
                filterPanel.style.animation = 'slideInDown 0.5s ease';
            } else {
                filterPanel.style.display = 'none';
            }
        }

        // SPRINT 9 ADDITION: Charts toggle
        function toggleCharts() {
            const chartsSection = document.getElementById('chartsSection');
            if (chartsSection.style.display === 'none' || chartsSection.style.display === '') {
                chartsSection.style.display = 'block';
                chartsSection.style.animation = 'fadeInUp 0.5s ease';

                // Load charts if not already loaded
                if (!chartsLoaded) {
                    initializeCharts();
                    chartsLoaded = true;
                }
            } else {
                chartsSection.style.display = 'none';
            }
        }

        // SPRINT 9 ADDITION: Initialize charts
        async function initializeCharts() {
            try {
                await Promise.all([
                    createVolumeChart(),
                    createCategoryChart(),
                    createWorkloadChart(),
                    createSLAChart(),
                    createResolutionChart()
                ]);
                console.log('Charts initialized successfully');
            } catch (error) {
                console.error('Error initializing charts:', error);
            }
        }

        // SPRINT 9 ADDITION: Chart creation functions
        async function createVolumeChart() {
            try {
                const response = await fetch('/ManagerDashboard/GetTicketVolumeData?days=30');
                const data = await response.json();

                const ctx = document.getElementById('volumeChart').getContext('2d');
                charts.volume = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.map(d => d.date),
                        datasets: [
                            {
                                label: 'Created',
                                data: data.map(d => d.created),
                                borderColor: '#00E5FF',
                                backgroundColor: 'rgba(0, 229, 255, 0.1)',
                                tension: 0.4,
                                fill: true
                            },
                            {
                                label: 'Resolved',
                                data: data.map(d => d.resolved),
                                borderColor: '#4CAF50',
                                backgroundColor: 'rgba(76, 175, 80, 0.1)',
                                tension: 0.4,
                                fill: true
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                labels: { color: '#FFFFFF' }
                            }
                        },
                        scales: {
                            x: {
                                ticks: { color: '#FFFFFF' },
                                grid: { color: 'rgba(255, 255, 255, 0.1)' }
                            },
                            y: {
                                beginAtZero: true,
                                ticks: { color: '#FFFFFF' },
                                grid: { color: 'rgba(255, 255, 255, 0.1)' }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error creating volume chart:', error);
            }
        }

        async function createCategoryChart() {
            try {
                const response = await fetch('/ManagerDashboard/GetCategoryDistribution');
                const data = await response.json();

                const ctx = document.getElementById('categoryChart').getContext('2d');
                charts.category = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.map(d => d.categoryName),
                        datasets: [{
                            data: data.map(d => d.count),
                            backgroundColor: ['#00E5FF', '#7B2CBF', '#FFB300', '#F44336', '#4CAF50', '#FF9800'],
                            borderWidth: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { color: '#FFFFFF' }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error creating category chart:', error);
            }
        }

        async function createWorkloadChart() {
            try {
                const response = await fetch('/ManagerDashboard/GetAgentWorkload');
                const data = await response.json();

                const ctx = document.getElementById('workloadChart').getContext('2d');
                charts.workload = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.map(d => d.agentName),
                        datasets: [
                            {
                                label: 'Open',
                                data: data.map(d => d.openTickets),
                                backgroundColor: '#FFB300'
                            },
                            {
                                label: 'In Progress',
                                data: data.map(d => d.inProgressTickets),
                                backgroundColor: '#00E5FF'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                stacked: true,
                                ticks: { color: '#FFFFFF' },
                                grid: { color: 'rgba(255, 255, 255, 0.1)' }
                            },
                            y: {
                                stacked: true,
                                beginAtZero: true,
                                ticks: { color: '#FFFFFF' },
                                grid: { color: 'rgba(255, 255, 255, 0.1)' }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: { color: '#FFFFFF' }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error creating workload chart:', error);
            }
        }

        async function createSLAChart() {
            try {
                const response = await fetch('/ManagerDashboard/GetSLAPerformance');
                const data = await response.json();

                const ctx = document.getElementById('slaChart').getContext('2d');
                charts.sla = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Met SLA', 'Missed SLA'],
                        datasets: [{
                            data: [data.ticketsMetSLA, data.totalTickets - data.ticketsMetSLA],
                            backgroundColor: ['#4CAF50', '#F44336'],
                            borderWidth: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '70%',
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { color: '#FFFFFF' }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error creating SLA chart:', error);
            }
        }

        async function createResolutionChart() {
            try {
                const response = await fetch('/ManagerDashboard/GetResolutionTrend?days=30');
                const data = await response.json();

                const ctx = document.getElementById('resolutionChart').getContext('2d');
                charts.resolution = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.map(d => d.date),
                        datasets: [
                            {
                                label: 'Resolution Hours',
                                data: data.map(d => d.averageResolutionHours),
                                borderColor: '#00E5FF',
                                backgroundColor: 'rgba(0, 229, 255, 0.1)',
                                tension: 0.4,
                                yAxisID: 'y'
                            },
                            {
                                label: 'SLA Compliance %',
                                data: data.map(d => d.slaCompliance),
                                borderColor: '#4CAF50',
                                backgroundColor: 'rgba(76, 175, 80, 0.1)',
                                tension: 0.4,
                                yAxisID: 'y1'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                ticks: { color: '#FFFFFF' },
                                grid: { color: 'rgba(255, 255, 255, 0.1)' }
                            },
                            y: {
                                type: 'linear',
                                position: 'left',
                                ticks: { color: '#FFFFFF' },
                                grid: { color: 'rgba(255, 255, 255, 0.1)' }
                            },
                            y1: {
                                type: 'linear',
                                position: 'right',
                                ticks: { color: '#FFFFFF' },
                                grid: { drawOnChartArea: false }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: { color: '#FFFFFF' }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error creating resolution chart:', error);
            }
        }

        // YOUR ORIGINAL: Initialize page animations
        document.addEventListener('DOMContentLoaded', function() {
            animateElements();
            setupInteractiveElements();
        });

        // YOUR ORIGINAL: Animate elements on load
        function animateElements() {
            const statCards = document.querySelectorAll('.stat-card');
            statCards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });
        }

        // YOUR ORIGINAL: Setup interactive elements
        function setupInteractiveElements() {
            const tableRows = document.querySelectorAll('.modern-table tbody tr');
            tableRows.forEach(row => {
                row.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateX(4px)';
                    this.style.boxShadow = '0 4px 20px rgba(0, 229, 255, 0.1)';
                });

                row.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateX(0)';
                    this.style.boxShadow = 'none';
                });
            });

            const buttons = document.querySelectorAll('.btn');
            buttons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    if (this.classList.contains('btn-primary')) {
                        this.style.boxShadow = '0 0 30px rgba(0, 229, 255, 0.5), 0 8px 25px rgba(0, 0, 0, 0.3)';
                    }
                });

                btn.addEventListener('mouseleave', function() {
                    if (this.classList.contains('btn-primary')) {
                        this.style.boxShadow = '0 0 40px rgba(0, 229, 255, 0.3)';
                    }
                });
            });
        }
    </script>
</body>
</html>