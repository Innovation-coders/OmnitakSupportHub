@model OmnitakSupportHub.Models.ViewModels.ManagerDashboardViewModel
@{
    ViewData["Title"] = "Manager Dashboard";
}
<style>
    :root {
        --primary-green: #10b981;
        --primary-green-dark: #059669;
        --primary-green-light: #34d399;
        --secondary-green: #065f46;
        --accent-green: #6ee7b7;
        --bg-primary: #f8fafc;
        --bg-secondary: #ffffff;
        --text-primary: #0f172a;
        --text-secondary: #64748b;
        --text-muted: #94a3b8;
        --border-color: #e2e8f0;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        --radius-sm: 0.375rem;
        --radius-md: 0.5rem;
        --radius-lg: 0.75rem;
        --radius-xl: 1rem;
    }

    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        background: var(--bg-primary);
        color: var(--text-primary);
        line-height: 1.6;
        margin: 0;
        min-height: 100vh;
    }

    .dashboard-container {
        display: flex;
        width: 100%;
        max-width: 1600px;
        margin: 0 auto;
        min-height: 100vh;
        background: var(--bg-secondary);
        box-shadow: var(--shadow-lg);
        border-radius: var(--radius-lg);
    }

    /* Sidebar Styling */
    .sidebar {
        width: 280px;
        background: linear-gradient(135deg, var(--primary-green) 0%, var(--primary-green-dark) 100%);
        color: white;
        padding: 25px;
        box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        position: sticky;
        top: 0;
        height: 100vh;
        overflow-y: auto;
        border-radius: var(--radius-lg) 0 0 var(--radius-lg);
    }

        .sidebar h3 {
            font-size: 1.6rem;
            margin-bottom: 30px;
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 1px;
            border-bottom: 2px solid rgba(255,255,255,0.2);
            padding-bottom: 15px;
        }

        .sidebar .nav-link {
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            padding: 15px 20px;
            margin-bottom: 8px;
            border-radius: var(--radius-md);
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 1rem;
        }

            .sidebar .nav-link:hover {
                background: rgba(255, 255, 255, 0.15);
                transform: translateX(5px);
                color: white;
            }

            .sidebar .nav-link.active {
                background: rgba(255, 255, 255, 0.2);
                font-weight: 600;
            }

            .sidebar .nav-link i {
                margin-right: 10px;
                font-size: 1.1rem;
            }

        .sidebar .logout-btn {
            width: 100%;
            padding: 15px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            border-radius: var(--radius-md);
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            margin-top: 30px;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

            .sidebar .logout-btn:hover {
                background: rgba(255, 255, 255, 0.2);
                border-color: rgba(255, 255, 255, 0.5);
                transform: translateY(-2px);
            }

    /* Main Content */
    .main-content {
        flex: 1;
        padding: 32px;
        background: var(--bg-secondary);
        border-radius: 0 var(--radius-lg) var(--radius-lg) 0;
        overflow-y: auto;
    }

    /* Header */
    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        flex-wrap: wrap;
        background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-primary) 100%);
        padding: 25px 30px;
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-md);
        border-left: 5px solid var(--primary-green);
    }

        .header h2 {
            color: var(--primary-green);
            font-size: 2.2rem;
            font-weight: 700;
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .header p {
            color: var(--secondary-green);
            font-size: 1.1rem;
            font-weight: 600;
            margin: 5px 0 0;
        }

    /* Statistics Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-primary) 100%);
        padding: 25px;
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-md);
        border-left: 5px solid;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .stat-card.primary {
            border-left-color: var(--primary-green);
        }

        .stat-card.info {
            border-left-color: #1976d2;
        }

        .stat-card.warning {
            border-left-color: #f57c00;
        }

        .stat-card.success {
            border-left-color: var(--primary-green-light);
        }

    .stat-number {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 5px;
        color: var(--primary-green);
    }

    .stat-label {
        color: var(--text-secondary);
        font-size: 1rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Button Styles from Source */
    .btn, .btn-primary, .btn-secondary, .btn-success, .btn-danger, .btn-warning {
        display: inline-block;
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        border-radius: var(--radius-md);
        font-weight: 600;
        border: none;
        cursor: pointer;
        margin-right: 5px;
        transition: all 0.3s ease;
        text-decoration: none;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-green) 0%, var(--primary-green-dark) 100%);
        color: white;
        box-shadow: var(--shadow-sm);
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, var(--primary-green-dark) 0%, var(--secondary-green) 100%);
            transform: translateY(-2px);
            color: white;
        }

    .btn-secondary {
        background: var(--bg-secondary);
        color: var(--text-secondary);
        border: 1px solid var(--border-color);
    }

        .btn-secondary:hover {
            background: var(--bg-primary);
            color: var(--primary-green);
            border-color: var(--primary-green);
        }

    .btn-success {
        background-color: var(--primary-green);
        color: white;
    }

        .btn-success:hover {
            background-color: var(--primary-green-dark);
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #b91c1c;
        }

    .btn-warning {
        background-color: #ffc107;
        color: #212529;
    }

        .btn-warning:hover {
            background-color: #ffb300;
        }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 15px;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }

    /* Section Cards */
    .section-card {
        background: var(--bg-secondary);
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-md);
        margin-bottom: 30px;
        overflow: hidden;
        border: 1px solid var(--border-color);
    }

    .section-header {
        background: linear-gradient(90deg, var(--primary-green), var(--secondary-green));
        color: white;
        padding: 20px 25px;
        font-size: 1.3rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .section-content {
        padding: 0;
    }

    /* Category Sections */
    .category-section {
        border-bottom: 1px solid var(--border-color);
    }

        .category-section:last-child {
            border-bottom: none;
        }

    .category-header {
        background: var(--bg-primary);
        padding: 20px 25px;
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--primary-green);
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .ticket-count-badge {
        background: var(--primary-green);
        color: white;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    /* Tables */
    .table-container {
        overflow-x: auto;
    }

    .table, table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        overflow: hidden;
        background: var(--bg-secondary);
    }

    th, td {
        padding: 15px 25px;
        text-align: left;
        border-bottom: 1px solid var(--border-color);
    }

    th {
        background-color: var(--primary-green);
        color: white;
        font-weight: 600;
        font-size: 0.95rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    td {
        background: var(--bg-primary);
        vertical-align: middle;
        font-size: 0.95rem;
    }

    /* Status and Priority Badges */
    .status-badge, .priority-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-open {
        background: #fff3e0;
        color: #e65100;
    }

    .status-assigned {
        background: rgba(16, 185, 129, 0.1);
        color: var(--primary-green);
    }

    .status-closed {
        background: #ffebee;
        color: #c62828;
    }

    .priority-high {
        background: #ffebee;
        color: #c62828;
    }

    .priority-medium {
        background: #fff3e0;
        color: #ef6c00;
    }

    .priority-low {
        background: rgba(16, 185, 129, 0.1);
        color: var(--primary-green);
    }

    /* Action Buttons for Table */
    .action-btn {
        padding: 8px 15px;
        text-decoration: none;
        border-radius: var(--radius-sm);
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.3s ease;
        margin-right: 5px;
        display: inline-block;
    }

        .action-btn.view {
            background: var(--primary-green);
            color: white;
        }

            .action-btn.view:hover {
                background: var(--primary-green-dark);
                color: white;
                transform: translateY(-1px);
            }

        .action-btn.edit {
            background: #1976d2;
            color: white;
        }

            .action-btn.edit:hover {
                background: #1565c0;
                color: white;
                transform: translateY(-1px);
            }

    /* Alerts */
    .alert {
        margin-bottom: 20px;
        padding: 20px 25px;
        border-radius: var(--radius-md);
        font-size: 1rem;
        border-left: 5px solid var(--primary-green);
        background: rgba(16, 185, 129, 0.1);
        color: var(--primary-green);
        box-shadow: var(--shadow-sm);
        font-weight: 500;
    }

    .alert-success {
        border-left-color: var(--primary-green);
        background: rgba(16, 185, 129, 0.1);
        color: var(--primary-green);
    }

    .alert-danger {
        border-left-color: #dc3545;
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .alert-info {
        border-left-color: #007bff;
        background: rgba(0, 123, 255, 0.1);
        color: #007bff;
    }

    /* Filter Section */
    .filter-section {
        background: var(--bg-primary);
        padding: 25px;
        border-radius: var(--radius-lg);
        margin-bottom: 25px;
        border: 1px solid var(--border-color);
        display: none;
    }

        .filter-section.active {
            display: block;
        }

    .filter-form {
        display: flex;
        gap: 20px;
        align-items: end;
        flex-wrap: wrap;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

        .filter-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--primary-green);
        }

        .filter-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid var(--border-color);
            border-radius: var(--radius-sm);
            font-size: 1rem;
            transition: border-color 0.3s ease;
            background: var(--bg-secondary);
            color: var(--text-primary);
        }

            .filter-group input:focus {
                outline: none;
                border-color: var(--primary-green);
            }

    /* Availability Indicators */
    .availability-indicator {
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .highly-available {
        background: rgba(16, 185, 129, 0.1);
        color: var(--primary-green);
    }

    .available {
        background: #fff3e0;
        color: #ef6c00;
    }

    .busy {
        background: #ffebee;
        color: #c62828;
    }

    /* Responsive Design */
    @@media (max-width: 1024px) {
        .dashboard-container

    {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        height: auto;
        position: relative;
        border-radius: var(--radius-lg) var(--radius-lg) 0 0;
    }

    .main-content {
        border-radius: 0 0 var(--radius-lg) var(--radius-lg);
    }

    }

    @@media (max-width: 768px) {
        .stats-grid

    {
        grid-template-columns: 1fr;
    }

    .action-buttons {
        flex-direction: column;
    }

    .filter-form {
        flex-direction: column;
    }

    }
</style>

<div class="dashboard-container">
    <div class="sidebar">
        <h3>🎛️ Manager Hub</h3>
        <a href="#" class="nav-link active"><i>📊</i> Dashboard</a>
        <a asp-controller="Ticket" asp-action="ManagerCreate" class="nav-link"><i>➕</i> Create Ticket</a>
        <a href="#" class="nav-link" onclick="toggleFilters()"><i>🔍</i> Filter Tickets</a>
        <a href="#" class="nav-link"><i>📈</i> Reports</a>
        <a href="#" class="nav-link"><i>⚙️</i> Settings</a>
        <form asp-controller="Account" asp-action="Logout" method="post" style="display:inline;">
            <button type="submit" class="logout-btn">🚪 Logout</button>
        </form>
    </div>
    <!-- ... Main content omitted here for brevity. Would contain stats, filters, tickets, agents, etc. ... -->
    <div class="main-content">
        <div class="header">
            <h1>Manager Dashboard</h1>
            <p>Welcome back! Here's what's happening with your support tickets today.</p>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                ✅ @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-info">
                ⚠️ @TempData["ErrorMessage"]
            </div>
        }

        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card primary">
                <div class="stat-number">@(Model.GroupedTickets?.SelectMany(g => g).Count() ?? 0)</div>
                <div class="stat-label">Total Tickets</div>
            </div>
            <div class="stat-card info">
                <div class="stat-number">@(Model.AvailableAgents?.Count ?? 0)</div>
                <div class="stat-label">Available Agents</div>
            </div>
            <div class="stat-card warning">
                <div class="stat-number">@(Model.GroupedTickets?.SelectMany(g => g).Count(t => t.Status?.StatusName == "Open") ?? 0)</div>
                <div class="stat-label">Open Tickets</div>
            </div>
            <div class="stat-card success">
                <div class="stat-number">@(Model.GroupedTickets?.SelectMany(g => g).Count(t => t.AssignedTo.HasValue) ?? 0)</div>
                <div class="stat-label">Assigned Tickets</div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <a asp-controller="Ticket" asp-action="ManagerCreate" class="btn btn-primary">
                ➕ Create New Ticket
            </a>
            <button onclick="toggleFilters()" class="btn btn-secondary">
                🔍 Toggle Filters
            </button>
            <a href="#agents-section" class="btn btn-success">
                👥 View Agents
            </a>
        </div>

        <!-- Filter Section -->
        <div id="filterSection" class="filter-section">
            <form method="get" class="filter-form">
                <div class="filter-group">
                    <label for="startDate">📅 Start Date:</label>
                    <input type="date" name="startDate" id="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")">
                </div>
                <div class="filter-group">
                    <label for="endDate">📅 End Date:</label>
                    <input type="date" name="endDate" id="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")">
                </div>
                <div class="filter-group">
                    <button type="submit" class="btn btn-primary">Apply Filter</button>
                </div>
                <div class="filter-group">
                    <a asp-action="Index" class="btn btn-secondary">Clear Filter</a>
                </div>
            </form>
        </div>

        <!-- Tickets by Category -->
        <div class="section-card">
            <div class="section-header">
                🎫 Tickets by Category
                <span>@(Model.StartDate?.ToString("MMM dd") ?? "Last 30 days") - @(Model.EndDate?.ToString("MMM dd, yyyy") ?? DateTime.Now.ToString("MMM dd, yyyy"))</span>
            </div>
            <div class="section-content">
                @if (Model.GroupedTickets != null && Model.GroupedTickets.Any())
                {
                    @foreach (var group in Model.GroupedTickets)
                    {
                        <div class="category-section">
                            <div class="category-header">
                                <span>📂 @(group.Key?.CategoryName ?? "Unknown Category")</span>
                                <span class="ticket-count-badge">@group.Count() tickets</span>
                            </div>
                            <div class="table-container">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Title</th>
                                            <th>Status</th>
                                            <th>Priority</th>
                                            <th>Assigned To</th>
                                            <th>Created By</th>
                                            <th>Created</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var ticket in group.OrderByDescending(t => t.CreatedAt))
                                        {
                                            <tr>
                                                <td style="font-weight: 600; max-width: 200px;">
                                                    @(ticket.Title?.Length > 50 ? ticket.Title.Substring(0, 50) + "..." : ticket.Title ?? "No Title")
                                                </td>
                                                <td>
                                                    <span class="status-badge status-@(ticket.Status?.StatusName?.ToLower() ?? "unknown")">
                                                        @(ticket.Status?.StatusName ?? "No Status")
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="priority-badge priority-@(ticket.Priority?.PriorityName?.ToLower() ?? "unknown")">
                                                        @(ticket.Priority?.PriorityName ?? "No Priority")
                                                    </span>
                                                </td>
                                                <td>
                                                    @if (ticket.AssignedToUser != null)
                                                    {
                                                        <strong>@ticket.AssignedToUser.FullName</strong>
                                                    }
                                                    else
                                                    {
                                                        <span style="color: #999; font-style: italic;">Unassigned</span>
                                                    }
                                                </td>
                                                <td>@(ticket.CreatedByUser?.FullName ?? "Unknown")</td>
                                                <td>
                                                    <div>@ticket.CreatedAt.ToString("MMM dd, yyyy")</div>
                                                    <small style="color: #666;">@ticket.CreatedAt.ToString("HH:mm")</small>
                                                </td>
                                                <td>
                                                    <a asp-controller="Ticket" asp-action="Details" asp-route-id="@ticket.TicketID"
                                                       class="action-btn view" title="View Details">👁️ View</a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info" style="margin: 25px;">
                        📋 No tickets found for the selected criteria.
                        <a asp-controller="Ticket" asp-action="ManagerCreate" style="color: #0d47a1; font-weight: 600;">Create the first ticket</a>
                    </div>
                }
            </div>
        </div>

        <!-- Available Agents Section -->
        <div class="section-card" id="agents-section">
            <div class="section-header">
                👥 Available Agents
                <span>Less than 5 active tickets</span>
            </div>
            <div class="section-content">
                @if (Model.AvailableAgents != null && Model.AvailableAgents.Any())
                {
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Agent Name</th>
                                    <th>Email</th>
                                    <th>Active Tickets</th>
                                    <th>Availability</th>
                                    <th>Last Activity</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var agent in Model.AvailableAgents.OrderBy(a => a.AssignedTickets?.Count ?? 0))
                                {
                                    var ticketCount = agent.AssignedTickets?.Count(t => t.Status?.StatusName != "Closed" && t.Status?.StatusName != "Resolved") ?? 0;
                                    <tr>
                                        <td style="font-weight: 600;">
                                            👤 @(agent.FullName ?? "No Name")
                                        </td>
                                        <td>
                                            <a href="mailto:@agent.Email" style="color: #1976d2;">
                                                @(agent.Email ?? "No Email")
                                            </a>
                                        </td>
                                        <td>
                                            <span class="status-badge @(ticketCount == 0 ? "status-assigned" : ticketCount < 3 ? "priority-medium" : "priority-high")">
                                                @ticketCount tickets
                                            </span>
                                        </td>
                                        <td>
                                            <span class="availability-indicator @(ticketCount == 0 ? "highly-available" : ticketCount < 3 ? "available" : "busy")">
                                                @(ticketCount == 0 ? "🟢 Highly Available" : ticketCount < 3 ? "🟡 Available" : "🔴 Busy")
                                            </span>
                                        </td>
                                        <td>
                                            <small style="color: #666;">
                                                @(agent.AssignedTickets?.OrderByDescending(t => t.CreatedAt).FirstOrDefault()?.CreatedAt.ToString("MMM dd, HH:mm") ?? "No recent activity")
                                            </small>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info" style="margin: 25px;">
                        👥 No available agents found with less than 5 active tickets. All agents are currently at capacity.
                    </div>
                }
            </div>
        </div>
    </div>


    <script>
        function toggleFilters() {
            const filterSection = document.getElementById('filterSection');
            filterSection.classList.toggle('active');
            if (filterSection.classList.contains('active')) {
                filterSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    alert.style.opacity = '0';
                    alert.style.transform = 'translateY(-20px)';
                    setTimeout(() => alert.remove(), 300);
                }, 5000);
            });

            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                });
            });

            document.querySelectorAll('.stat-card').forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-8px) scale(1.02)';
                });
                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0) scale(1)';
                });
            });

            document.querySelectorAll('.btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    const ripple = document.createElement('span');
                    const rect = this.getBoundingClientRect();
                    const size = Math.max(rect.width, rect.height);
                    const x = e.clientX - rect.left - size / 2;
                    const y = e.clientY - rect.top - size / 2;

                    ripple.style.cssText = \`
                        position: absolute;
                        width: \${size}px;
                        height: \${size}px;
                        left: \${x}px;
                        top: \${y}px;
                        background: rgba(255, 255, 255, 0.3);
                        border-radius: 50%;
                        transform: scale(0);
                        animation: ripple 0.6s linear;
                        pointer-events: none;
                    \`;

                    this.style.position = 'relative';
                    this.style.overflow = 'hidden';
                    this.appendChild(ripple);

                    setTimeout(() => ripple.remove(), 600);
                });
            });

            const style = document.createElement('style');
            style.textContent = \`
                @@keyframes ripple {
                    to {
                        transform: scale(4);
                        opacity: 0;
                    }
                }
            \`;
            document.head.appendChild(style);
        });
    </script>
