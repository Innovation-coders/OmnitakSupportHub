@model OmnitakSupportHub.Models.Ticket
@{
    ViewData["Title"] = $"Ticket #{Model.TicketID} - Details";
    Layout = null;
    var chatMessages = ViewBag.ChatMessages as List<OmnitakSupportHub.Models.ChatMessage> ?? new List<OmnitakSupportHub.Models.ChatMessage>();
    var timeline = ViewBag.Timeline as List<OmnitakSupportHub.Models.TicketTimeline> ?? new List<OmnitakSupportHub.Models.TicketTimeline>();
    var availableStatuses = ViewBag.AvailableStatuses as List<OmnitakSupportHub.Models.Status> ?? new List<OmnitakSupportHub.Models.Status>();
    var availablePriorities = ViewBag.AvailablePriorities as List<OmnitakSupportHub.Models.Priority> ?? new List<OmnitakSupportHub.Models.Priority>();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">

    <style>
        :root {
            --primary-blue: #2563eb;
            --success-green: #16a34a;
            --warning-orange: #ea580c;
            --danger-red: #dc2626;
            --info-cyan: #0891b2;
            --light-gray: #f8fafc;
            --medium-gray: #64748b;
            --dark-gray: #334155;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --hover-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        body {
            background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .ticket-header {
            background: linear-gradient(135deg, var(--primary-blue) 0%, #1d4ed8 100%);
            color: white;
            padding: 2rem 0;
            box-shadow: var(--card-shadow);
        }

        .detail-card {
            background: white;
            border-radius: 16px;
            box-shadow: var(--card-shadow);
            margin-bottom: 1.5rem;
            overflow: hidden;
        }

        .card-header-custom {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .priority-high {
            color: var(--danger-red);
        }

        .priority-medium {
            color: var(--warning-orange);
        }

        .priority-low {
            color: var(--success-green);
        }

        .status-new {
            color: var(--primary-blue);
        }

        .status-in-progress {
            color: var(--warning-orange);
        }

        .status-pending-user {
            color: var(--info-cyan);
        }

        .status-resolved {
            color: var(--success-green);
        }

        .status-closed {
            color: var(--medium-gray);
        }

        .timeline-container {
            max-height: 400px;
            overflow-y: auto;
        }

        .timeline-item {
            display: flex;
            align-items: start;
            margin-bottom: 1.5rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
        }

            .timeline-item:last-child {
                border-bottom: none;
                margin-bottom: 0;
            }

        .timeline-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 1rem;
            flex-shrink: 0;
        }

            .timeline-icon.status-change {
                background: var(--primary-blue);
                color: white;
            }

            .timeline-icon.priority-change {
                background: var(--warning-orange);
                color: white;
            }

            .timeline-icon.comment-added {
                background: var(--success-green);
                color: white;
            }

        .chat-container {
            max-height: 500px;
            overflow-y: auto;
            padding: 1rem;
        }

        .chat-message {
            background: #f8fafc;
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
            border-left: 4px solid var(--primary-blue);
            position: relative;
        }

            .chat-message.agent {
                background: #e0f2fe;
                border-left-color: var(--info-cyan);
                margin-left: 2rem;
            }

            .chat-message.customer {
                background: #f3f4f6;
                border-left-color: var(--medium-gray);
                margin-right: 2rem;
            }

        .message-sender {
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--dark-gray);
            margin-bottom: 0.25rem;
        }

        .message-time {
            font-size: 0.75rem;
            color: var(--medium-gray);
            margin-bottom: 0.5rem;
        }

        .btn-action {
            border: none;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 600;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .btn-primary-custom {
            background: var(--primary-blue);
            color: white;
        }

            .btn-primary-custom:hover {
                background: #1d4ed8;
                transform: translateY(-1px);
                color: white;
            }

        .btn-success-custom {
            background: var(--success-green);
            color: white;
        }

            .btn-success-custom:hover {
                background: #15803d;
                color: white;
            }

        .btn-warning-custom {
            background: var(--warning-orange);
            color: white;
        }

            .btn-warning-custom:hover {
                background: #c2410c;
                color: white;
            }

        .btn-danger-custom {
            background: var(--danger-red);
            color: white;
        }

            .btn-danger-custom:hover {
                background: #b91c1c;
                color: white;
            }

        /* Sign Out Button Styles */
        .btn-signout {
            background: rgba(220, 38, 38, 0.1);
            color: var(--danger-red);
            border: 2px solid rgba(220, 38, 38, 0.2);
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 600;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .btn-signout:hover {
                background: var(--danger-red);
                color: white;
                border-color: var(--danger-red);
                transform: translateY(-1px);
            }

        .sla-indicator {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 600;
            text-align: center;
        }

        .sla-met {
            background: rgba(22, 163, 74, 0.1);
            color: var(--success-green);
        }

        .sla-warning {
            background: rgba(234, 88, 12, 0.1);
            color: var(--warning-orange);
        }

        .sla-critical {
            background: rgba(220, 38, 38, 0.1);
            color: var(--danger-red);
        }

        .sla-overdue {
            background: rgba(220, 38, 38, 0.2);
            color: var(--danger-red);
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .info-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #f1f5f9;
        }

            .info-row:last-child {
                border-bottom: none;
            }

        .info-label {
            font-weight: 600;
            color: var(--medium-gray);
        }

        .info-value {
            color: var(--dark-gray);
        }

        @@media (max-width: 768px) {
            .ticket-header

        {
            padding: 1.5rem 0;
        }

        .detail-card {
            margin-bottom: 1rem;
        }

        .btn-action {
            flex: 1;
            text-align: center;
            justify-content: center;
            margin-right: 0;
        }

        .chat-message.agent {
            margin-left: 1rem;
        }

        .chat-message.customer {
            margin-right: 1rem;
        }

        .header-actions {
            margin-top: 1rem;
            text-align: center;
        }

            .header-actions .btn-signout {
                width: 100%;
                justify-content: center;
            }

        }
    </style>
</head>
<body>
    <!-- Ticket Header -->
    <div class="ticket-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <div class="d-flex align-items-center mb-2">
                        <span class="badge bg-light text-dark me-3 fs-6">#@Model.TicketID</span>
                        <h1 class="mb-0">@Model.Title</h1>
                    </div>
                    <div class="d-flex gap-3 mb-3">
                        <span class="badge bg-white bg-opacity-25 fs-6">
                            <i class="bi bi-flag me-1"></i>
                            @Model.Priority?.PriorityName Priority
                        </span>
                        <span class="badge bg-white bg-opacity-25 fs-6">
                            <i class="bi bi-circle-fill me-1"></i>
                            @Model.Status?.StatusName
                        </span>
                        <span class="badge bg-white bg-opacity-25 fs-6">
                            <i class="bi bi-tag me-1"></i>
                            @Model.Category?.CategoryName
                        </span>
                    </div>
                    <p class="mb-0 opacity-75">
                        <i class="bi bi-person me-1"></i>
                        Created by @Model.CreatedByUser?.FullName on @Model.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")
                    </p>
                </div>
                <div class="col-md-6">
                    <div class="d-flex align-items-center justify-content-end gap-3">
                        <a href="/AgentDashboard" class="btn btn-light">
                            <i class="bi bi-arrow-left me-2"></i>
                            Back to Dashboard
                        </a>
                        <div class="header-actions">
                            <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn-signout" onclick="return confirm('Are you sure you want to sign out?')">
                                    <i class="bi bi-box-arrow-right"></i>
                                    Sign Out
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success fade-in">
                <i class="bi bi-check-circle me-2"></i>
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger fade-in">
                <i class="bi bi-exclamation-triangle me-2"></i>
                @TempData["ErrorMessage"]
            </div>
        }

        <div class="row">
            <!-- Left Column: Ticket Details and Communication -->
            <div class="col-lg-8">
                <!-- Ticket Information -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>
                            Ticket Information
                        </h5>
                    </div>
                    <div class="p-3">
                        <div class="info-row">
                            <span class="info-label">Description</span>
                            <span class="info-value">@Model.Description</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Customer</span>
                            <span class="info-value">@Model.CreatedByUser?.FullName</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Assigned Agent</span>
                            <span class="info-value">@Model.AssignedToUser?.FullName</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Created</span>
                            <span class="info-value">@Model.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")</span>
                        </div>
                        @if (Model.ClosedAt.HasValue)
                        {
                            <div class="info-row">
                                <span class="info-label">Resolved</span>
                                <span class="info-value">@Model.ClosedAt.Value.ToString("MMMM dd, yyyy 'at' HH:mm")</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-lightning me-2"></i>
                            Quick Actions
                        </h5>
                    </div>
                    <div class="p-3">
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var status in availableStatuses.Where(s => s.StatusName != Model.Status?.StatusName))
                            {
                                <form asp-action="UpdateStatus" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="ticketId" value="@Model.TicketID" />
                                    <input type="hidden" name="newStatus" value="@status.StatusName" />
                                    <button type="submit" class="btn-action @(status.StatusName == "Resolved" ? "btn-success-custom" : status.StatusName == "In Progress" ? "btn-warning-custom" : "btn-primary-custom")">
                                        <i class="bi bi-@(status.StatusName == "Resolved" ? "check-circle" : status.StatusName == "In Progress" ? "play" : "arrow-right")"></i>
                                        Mark as @status.StatusName
                                    </button>
                                </form>
                            }
                        </div>

                        @if (availablePriorities.Any())
                        {
                            <hr class="my-3">
                            <h6 class="mb-2">Update Priority:</h6>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var priority in availablePriorities.Where(p => p.PriorityName != Model.Priority?.PriorityName))
                                {
                                    <form asp-action="UpdatePriority" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ticketId" value="@Model.TicketID" />
                                        <input type="hidden" name="priority" value="@priority.PriorityName" />
                                        <button type="submit" class="btn-action @(priority.PriorityName == "High" ? "btn-danger-custom" : priority.PriorityName == "Medium" ? "btn-warning-custom" : "btn-success-custom")">
                                            <i class="bi bi-flag"></i>
                                            @priority.PriorityName Priority
                                        </button>
                                    </form>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Communication -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-chat-left-text me-2"></i>
                            Communication (@chatMessages.Count messages)
                        </h5>
                    </div>

                    @if (chatMessages.Any())
                    {
                        <div class="chat-container">
                            @foreach (var message in chatMessages.OrderBy(m => m.SentAt))
                            {
                                var isAgent = message.User?.Role?.RoleName == "Support Agent" || message.User?.Role?.RoleName == "Support Manager";
                                <div class="chat-message @(isAgent ? "agent" : "customer")">
                                    <div class="message-sender">
                                        @(message.User?.FullName ?? "Unknown")
                                        @if (isAgent)
                                        {
                                            <span class="badge bg-primary ms-1">Agent</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary ms-1">Customer</span>
                                        }
                                    </div>
                                    <div class="message-time">@message.SentAt.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                                    <div class="mt-2">@message.Message</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-chat-left fs-1 mb-2"></i>
                            <p>No messages yet. Start the conversation!</p>
                        </div>
                    }

                    <!-- Add Message Form -->
                    <div class="p-3 border-top">
                        <form asp-action="AddComment" asp-controller="AgentDashboard" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="ticketId" value="@Model.TicketID" />
                            <div class="input-group">
                                <textarea name="message"
                                          class="form-control"
                                          rows="3"
                                          placeholder="Type your message here..."
                                          required></textarea>
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-send"></i>
                                    Send
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Right Column: Timeline and SLA -->
            <div class="col-lg-4">
                <!-- SLA Information -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-stopwatch me-2"></i>
                            SLA Information
                        </h5>
                    </div>
                    <div class="p-3">
                        @{
                            var slaHours = Model.Priority?.PriorityName switch
                            {
                                "High" => 4,
                                "Medium" => 24,
                                "Low" => 72,
                                _ => 48
                            };
                            var slaDeadline = Model.CreatedAt.AddHours(slaHours);
                            var timeRemaining = slaDeadline - DateTime.UtcNow;
                            var isOverdue = timeRemaining.TotalHours <= 0;
                            var isCritical = timeRemaining.TotalHours <= slaHours * 0.25;
                            var isWarning = timeRemaining.TotalHours <= slaHours * 0.5;

                            string slaStatus, slaClass;
                            if (Model.Status?.StatusName == "Resolved" || Model.Status?.StatusName == "Closed")
                            {
                                slaStatus = Model.ClosedAt <= slaDeadline ? "Met" : "Missed";
                                slaClass = slaStatus == "Met" ? "sla-met" : "sla-overdue";
                            }
                            else if (isOverdue)
                            {
                                slaStatus = "Overdue";
                                slaClass = "sla-overdue";
                            }
                            else if (isCritical)
                            {
                                slaStatus = "Critical";
                                slaClass = "sla-critical";
                            }
                            else if (isWarning)
                            {
                                slaStatus = "Warning";
                                slaClass = "sla-warning";
                            }
                            else
                            {
                                slaStatus = "On Track";
                                slaClass = "sla-met";
                            }
                        }

                        <div class="sla-indicator @slaClass mb-3">
                            <strong>@slaStatus</strong>
                        </div>

                        <div class="info-row">
                            <span class="info-label">SLA Target</span>
                            <span class="info-value">@slaHours hours</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Deadline</span>
                            <span class="info-value">@slaDeadline.ToString("MMM dd, HH:mm")</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Time Remaining</span>
                            <span class="info-value @(isOverdue ? "text-danger" : isWarning ? "text-warning" : "text-success")">
                                @if (Model.Status?.StatusName == "Resolved" || Model.Status?.StatusName == "Closed")
                                {
                                    <span>Ticket Resolved</span>
                                }
                                else if (isOverdue)
                                {
                                    <span class="text-danger">
                                        @Math.Abs((int)timeRemaining.TotalHours)h @Math.Abs(timeRemaining.Minutes).ToString("00")m overdue
                                    </span>
                                }
                                else
                                {
                                    <span class="@(isCritical ? "text-danger" : isWarning ? "text-warning" : "text-success")">
                                        @((int)timeRemaining.TotalHours)h @timeRemaining.Minutes.ToString("00")m
                                    </span>
                                }
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Activity Timeline -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-activity me-2"></i>
                            Activity Timeline
                        </h5>
                    </div>

                    @if (timeline.Any())
                    {
                        <div class="timeline-container p-3">
                            @foreach (var activity in timeline)
                            {
                                <div class="timeline-item">
                                    <div class="timeline-icon status-change">
                                        <i class="bi bi-arrow-right"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-bold">Status Update</div>
                                        <div class="text-muted small">
                                            @activity.OldStatus → @activity.NewStatus
                                        </div>
                                        <div class="text-muted small">
                                            <i class="bi bi-clock me-1"></i>
                                            @activity.ChangeTime.ToString("MMM dd, yyyy 'at' HH:mm")
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-activity fs-1 mb-2"></i>
                            <p>No activity recorded yet.</p>
                        </div>
                    }
                </div>

                <!-- Back to Dashboard -->
                <div class="detail-card fade-in">
                    <div class="p-3 text-center">
                        <a href="/AgentDashboard" class="btn-action btn-primary-custom w-100">
                            <i class="bi bi-arrow-left"></i>
                            Back to Dashboard
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            const chatContainer = document.querySelector('.chat-container');
            if (chatContainer) {
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }


            const textarea = document.querySelector('textarea[name="message"]');
            if (textarea) {
                textarea.addEventListener('input', function() {
                    this.style.height = 'auto';
                    this.style.height = this.scrollHeight + 'px';
                });
            }


            document.querySelectorAll('form[action*="UpdateStatus"] button').forEach(button => {
                if (button.textContent.includes('Resolved') || button.textContent.includes('Closed')) {
                    button.addEventListener('click', function(e) {
                        if (!confirm('Are you sure you want to mark this ticket as ' + this.textContent.trim() + '?')) {
                            e.preventDefault();
                        }
                    });
                }
            });


            const slaIndicator = document.querySelector('.sla-overdue, .sla-critical');
            if (slaIndicator) {
                slaIndicator.style.animation = 'pulse 2s infinite';
            }
        });

        const style = document.createElement('style');
        style.textContent = `
            @@keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.7; }
                100% { opacity: 1; }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>