@model OmnitakSupportHub.Models.ViewModels.AgentDashboardViewModel
@{
    ViewData["Title"] = "Support Agent Dashboard";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">

    <style>
        :root {
            --primary-blue: #2563eb;
            --success-green: #16a34a;
            --warning-orange: #ea580c;
            --danger-red: #dc2626;
            --info-cyan: #0891b2;
            --light-gray: #f8fafc;
            --medium-gray: #64748b;
            --dark-gray: #334155;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --hover-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        body {
            background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .dashboard-header {
            background: linear-gradient(135deg, var(--primary-blue) 0%, #1d4ed8 100%);
            color: white;
            padding: 2rem 0;
            box-shadow: var(--card-shadow);
        }

        .agent-info-card {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 1.5rem;
        }

        .performance-overview {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 1.5rem;
            margin-top: 1rem;
        }

        .performance-metric {
            text-align: center;
        }

        .metric-value {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .metric-label {
            font-size: 0.875rem;
            opacity: 0.8;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .stat-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
            border-left: 4px solid;
            position: relative;
            overflow: hidden;
        }

            .stat-card:hover {
                transform: translateY(-2px);
                box-shadow: var(--hover-shadow);
            }

            .stat-card.total {
                border-left-color: var(--primary-blue);
            }

            .stat-card.new {
                border-left-color: var(--info-cyan);
            }

            .stat-card.in-progress {
                border-left-color: var(--warning-orange);
            }

            .stat-card.resolved {
                border-left-color: var(--success-green);
            }

            .stat-card.overdue {
                border-left-color: var(--danger-red);
            }

            .stat-card.high-priority {
                border-left-color: var(--danger-red);
            }

        .icon-stat {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .icon-total {
            background: rgba(37, 99, 235, 0.1);
            color: var(--primary-blue);
        }

        .icon-new {
            background: rgba(8, 145, 178, 0.1);
            color: var(--info-cyan);
        }

        .icon-progress {
            background: rgba(234, 88, 12, 0.1);
            color: var(--warning-orange);
        }

        .icon-resolved {
            background: rgba(22, 163, 74, 0.1);
            color: var(--success-green);
        }

        .icon-overdue {
            background: rgba(220, 38, 38, 0.1);
            color: var(--danger-red);
        }

        .tickets-section {
            background: white;
            border-radius: 16px;
            box-shadow: var(--card-shadow);
            margin: 2rem 0;
        }

        .section-header {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 1.5rem;
            border-radius: 16px 16px 0 0;
            border-bottom: 1px solid #e2e8f0;
        }

        .ticket-card {
            border: none;
            border-bottom: 1px solid #e2e8f0;
            padding: 1.5rem;
            transition: background-color 0.2s ease;
        }

            .ticket-card:hover {
                background: #f8fafc;
            }

            .ticket-card:last-child {
                border-bottom: none;
                border-radius: 0 0 16px 16px;
            }

        .priority-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-weight: 600;
        }

        .priority-high {
            background: rgba(220, 38, 38, 0.1);
            color: var(--danger-red);
        }

        .priority-medium {
            background: rgba(234, 88, 12, 0.1);
            color: var(--warning-orange);
        }

        .priority-low {
            background: rgba(22, 163, 74, 0.1);
            color: var(--success-green);
        }

        .status-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-weight: 600;
        }

        .status-new {
            background: rgba(8, 145, 178, 0.1);
            color: var(--info-cyan);
        }

        .status-in-progress {
            background: rgba(234, 88, 12, 0.1);
            color: var(--warning-orange);
        }

        .status-pending-user {
            background: rgba(168, 85, 247, 0.1);
            color: #7c3aed;
        }

        .status-resolved {
            background: rgba(22, 163, 74, 0.1);
            color: var(--success-green);
        }

        .btn-action {
            border: none;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 600;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary-custom {
            background: var(--primary-blue);
            color: white;
        }

            .btn-primary-custom:hover {
                background: #1d4ed8;
                transform: translateY(-1px);
            }

        .btn-success-custom {
            background: var(--success-green);
            color: white;
        }

            .btn-success-custom:hover {
                background: #15803d;
            }

        .btn-warning-custom {
            background: var(--warning-orange);
            color: white;
        }

        .btn-outline-custom {
            border: 2px solid var(--primary-blue);
            color: var(--primary-blue);
            background: transparent;
        }

            .btn-outline-custom:hover {
                background: var(--primary-blue);
                color: white;
            }

        /* Sign Out Button Styles */
        .btn-signout {
            background: rgba(220, 38, 38, 0.1);
            color: var(--danger-red);
            border: 2px solid rgba(220, 38, 38, 0.2);
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 600;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .btn-signout:hover {
                background: var(--danger-red);
                color: white;
                border-color: var(--danger-red);
                transform: translateY(-1px);
            }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .search-filter-section {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
        }

        .search-box {
            position: relative;
        }

            .search-box input {
                padding-left: 2.5rem;
                border-radius: 12px;
                border: 2px solid #e2e8f0;
                transition: border-color 0.3s ease;
            }

                .search-box input:focus {
                    border-color: var(--primary-blue);
                    outline: none;
                    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
                }

            .search-box .search-icon {
                position: absolute;
                left: 0.75rem;
                top: 50%;
                transform: translateY(-50%);
                color: var(--medium-gray);
            }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .alert-success {
            background: rgba(22, 163, 74, 0.1);
            border: 1px solid rgba(22, 163, 74, 0.2);
            color: var(--success-green);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .alert-danger {
            background: rgba(220, 38, 38, 0.1);
            border: 1px solid rgba(220, 38, 38, 0.2);
            color: var(--danger-red);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .chat-preview {
            background: #f8fafc;
            border-radius: 8px;
            padding: 0.75rem;
            margin-top: 1rem;
            border-left: 3px solid var(--primary-blue);
        }

        .message-sender {
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--dark-gray);
        }

        .message-time {
            font-size: 0.75rem;
            color: var(--medium-gray);
        }

        @@media (max-width: 768px) {
            .stats-grid

        {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .action-buttons {
            justify-content: stretch;
        }

        .btn-action {
            flex: 1;
            text-align: center;
            justify-content: center;
        }

        .dashboard-header {
            padding: 1.5rem 0;
        }

        .agent-info-card, .performance-overview {
            padding: 1rem;
        }

        .header-actions {
            margin-top: 1rem;
            text-align: center;
        }

            .header-actions .btn-signout {
                width: 100%;
                justify-content: center;
            }

        }
    </style>
</head>
<body>
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h1 class="mb-2">
                        <i class="bi bi-headset me-2"></i>
                        Support Agent Dashboard
                    </h1>
                    <p class="mb-0 opacity-75">Manage and resolve customer tickets efficiently</p>
                </div>
                <div class="col-md-6">
                    <div class="d-flex align-items-center justify-content-end">
                        <div class="agent-info-card me-3">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <div class="bg-white rounded-circle d-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                                        <i class="bi bi-person-fill fs-2 text-primary"></i>
                                    </div>
                                </div>
                                <div>
                                    <h5 class="mb-1">@Model.AgentName</h5>
                                    <p class="mb-0 opacity-75">@Model.TeamName</p>
                                    <small class="opacity-75">@Model.DepartmentName</small>
                                </div>
                            </div>
                        </div>
                        <div class="header-actions">
                            <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn-signout" onclick="return confirm('Are you sure you want to sign out?')">
                                    <i class="bi bi-box-arrow-right"></i>
                                    Sign Out
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Performance Overview (Agent-Friendly) -->
            <div class="performance-overview">
                <div class="row text-center">
                    <div class="col-md-3">
                        <div class="performance-metric">
                            <div class="metric-value @Model.GetWorkloadStatusClass()">@Model.GetWorkloadStatus()</div>
                            <div class="metric-label">My Workload</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="performance-metric">
                            <div class="metric-value text-info">@Model.ResolvedToday</div>
                            <div class="metric-label">Resolved Today</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="performance-metric">
                            <div class="metric-value @Model.GetResolutionTrendClass()">
                                <i class="@Model.GetResolutionTrendIcon() me-1"></i>
                                @Model.GetResolutionTrend()
                            </div>
                            <div class="metric-label">My Trend</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="performance-metric">
                            <div class="metric-value @Model.GetSLAStatusClass()">@Model.GetSLAStatus()</div>
                            <div class="metric-label">SLA Status</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert-success fade-in">
                <i class="bi bi-check-circle me-2"></i>
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert-danger fade-in">
                <i class="bi bi-exclamation-triangle me-2"></i>
                @TempData["ErrorMessage"]
            </div>
        }

        <!-- Statistics Cards -->
        <div class="stats-grid fade-in">
            <div class="stat-card total">
                <div class="icon-stat icon-total">
                    <i class="bi bi-clipboard-data"></i>
                </div>
                <h3 class="mb-1">@Model.AssignedToMe</h3>
                <p class="text-muted mb-0">Assigned to Me</p>
            </div>
            <div class="stat-card new">
                <div class="icon-stat icon-new">
                    <i class="bi bi-plus-circle"></i>
                </div>
                <h3 class="mb-1">@Model.NewTickets</h3>
                <p class="text-muted mb-0">New Tickets</p>
            </div>
            <div class="stat-card in-progress">
                <div class="icon-stat icon-progress">
                    <i class="bi bi-hourglass-split"></i>
                </div>
                <h3 class="mb-1">@Model.InProgress</h3>
                <p class="text-muted mb-0">In Progress</p>
            </div>
            <div class="stat-card resolved">
                <div class="icon-stat icon-resolved">
                    <i class="bi bi-check-circle"></i>
                </div>
                <h3 class="mb-1">@Model.ResolvedToday</h3>
                <p class="text-muted mb-0">Resolved Today</p>
            </div>
            <div class="stat-card overdue">
                <div class="icon-stat icon-overdue">
                    <i class="bi bi-exclamation-triangle"></i>
                </div>
                <h3 class="mb-1">@Model.OverdueTickets</h3>
                <p class="text-muted mb-0">Overdue</p>
            </div>
            <div class="stat-card high-priority">
                <div class="icon-stat icon-overdue">
                    <i class="bi bi-flag"></i>
                </div>
                <h3 class="mb-1">@Model.HighPriorityTickets</h3>
                <p class="text-muted mb-0">High Priority</p>
            </div>
        </div>

        <!-- Search and Filter Section -->
        <div class="search-filter-section fade-in">
            <form method="get" asp-action="Index">
                <div class="row g-3 align-items-end">
                    <div class="col-md-4">
                        <label class="form-label fw-bold">Search Tickets</label>
                        <div class="search-box">
                            <i class="bi bi-search search-icon"></i>
                            <input type="text"
                                   name="searchTerm"
                                   value="@Model.CurrentSearchTerm"
                                   class="form-control"
                                   placeholder="Search by title, description, or customer...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-bold">Status</label>
                        <select name="statusFilter" class="form-select">
                            <option value="">All Status</option>
                            @foreach (var status in Model.AvailableStatuses)
                            {
                                <option value="@status" selected="@(Model.CurrentStatusFilter == status)">@status</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-bold">Priority</label>
                        <select name="priorityFilter" class="form-select">
                            <option value="">All Priority</option>
                            @foreach (var priority in Model.AvailablePriorities)
                            {
                                <option value="@priority" selected="@(Model.CurrentPriorityFilter == priority)">@priority</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary-custom w-100">
                            <i class="bi bi-funnel"></i>
                            Filter
                        </button>
                    </div>
                </div>
            </form>
        </div>

        <!-- Tickets Section -->
        <div class="tickets-section fade-in">
            <div class="section-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="bi bi-ticket-perforated me-2"></i>
                        My Tickets (@Model.AssignedTickets.Count)
                    </h4>
                    @if (Model.HasUrgentTickets())
                    {
                        <span class="badge bg-danger">
                            <i class="bi bi-exclamation-triangle me-1"></i>
                            Urgent Action Required
                        </span>
                    }
                </div>
            </div>

            @if (Model.AssignedTickets.Any())
            {
                @foreach (var ticket in Model.AssignedTickets)
                {
                    <div class="ticket-card">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="d-flex align-items-start">
                                    <div class="me-3">
                                        <span class="badge bg-light text-dark">#@ticket.TicketID</span>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 fw-bold">@ticket.Title</h6>
                                        <p class="mb-2 text-muted small">@ticket.Description.Substring(0, Math.Min(100, ticket.Description.Length))@(ticket.Description.Length > 100 ? "..." : "")</p>
                                        <div class="d-flex gap-2 mb-2">
                                            <span class="priority-badge priority-@ticket.Priority?.PriorityName?.ToLower()">
                                                <i class="bi bi-flag me-1"></i>@ticket.Priority?.PriorityName
                                            </span>
                                            <span class="status-badge status-@ticket.Status?.StatusName?.ToLower()?.Replace(" ", "-")">
                                                @ticket.Status?.StatusName
                                            </span>
                                        </div>
                                        <small class="text-muted">
                                            <i class="bi bi-person me-1"></i>@ticket.CreatedByUser?.FullName
                                            <i class="bi bi-calendar ms-3 me-1"></i>@ticket.CreatedAt.ToString("MMM dd, yyyy")
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="action-buttons">
                                    <a href="/AgentDashboard/TicketDetails/@ticket.TicketID" class="btn-action btn-primary-custom">
                                        <i class="bi bi-eye"></i>
                                        View Details
                                    </a>

                                    @if (ticket.Status?.StatusName != "Resolved")
                                    {
                                        <form asp-action="UpdateStatus" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="ticketId" value="@ticket.TicketID" />
                                            <input type="hidden" name="newStatus" value="In Progress" />
                                            <button type="submit" class="btn-action btn-warning-custom">
                                                <i class="bi bi-play"></i>
                                                Start Work
                                            </button>
                                        </form>

                                        <form asp-action="UpdateStatus" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="ticketId" value="@ticket.TicketID" />
                                            <input type="hidden" name="newStatus" value="Resolved" />
                                            <button type="submit" class="btn-action btn-success-custom">
                                                <i class="bi bi-check-circle"></i>
                                                Resolve
                                            </button>
                                        </form>
                                    }
                                </div>

                                <!-- Quick Comment -->
                                <div class="mt-2">
                                    <form asp-action="AddComment" method="post" class="d-flex gap-2">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ticketId" value="@ticket.TicketID" />
                                        <div class="input-group input-group-sm">
                                            <input type="text"
                                                   name="message"
                                                   class="form-control"
                                                   placeholder="Add a quick comment..."
                                                   required>
                                            <button type="submit" class="btn btn-outline-primary">
                                                <i class="bi bi-send"></i>
                                            </button>
                                        </div>
                                    </form>
                                </div>

                                <!-- Chat History Preview -->
                                @if (Model.TicketChats.TryGetValue(ticket.TicketID, out var messages) && messages.Any())
                                {
                                    <div class="chat-preview mt-2">
                                        <small class="fw-bold">
                                            <i class="bi bi-chat-left-text me-1"></i>
                                            Recent: @messages.Count message(s)
                                        </small>
                                        @foreach (var msg in messages.OrderByDescending(m => m.SentAt).Take(1))
                                        {
                                            <div class="mt-1">
                                                <div class="message-sender">@(msg.User?.FullName ?? "Unknown User")</div>
                                                <div class="small">@msg.Message.Substring(0, Math.Min(80, msg.Message.Length))@(msg.Message.Length > 80 ? "..." : "")</div>
                                                <div class="message-time">@msg.SentAt.ToString("MMM dd 'at' HH:mm")</div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h5 class="mt-3 text-muted">No tickets assigned</h5>
                    <p class="text-muted">You're all caught up! New tickets will appear here.</p>
                </div>
            }
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Auto-refresh stats every 30 seconds
        setInterval(function() {
            fetch('/AgentDashboard/GetTicketStats')
                .then(response => response.json())
                .then(data => {
                    if (!data.error) {
                        // Update metric displays without reloading page
                        console.log('Stats updated:', data);
                    }
                })
                .catch(error => console.error('Error updating stats:', error));
        }, 30000);

        // Add confirmation for resolve actions
        document.querySelectorAll('form[action*="UpdateStatus"] button').forEach(button => {
            if (button.textContent.includes('Resolve')) {
                button.addEventListener('click', function(e) {
                    if (!confirm('Are you sure you want to mark this ticket as resolved?')) {
                        e.preventDefault();
                    }
                });
            }
        });
    </script>
</body>
</html>