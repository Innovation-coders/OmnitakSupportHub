@model OmnitakSupportHub.Models.Ticket
@{
    ViewData["Title"] = "Ticket Details";
    var chatMessages = ViewBag.ChatMessages as List<OmnitakSupportHub.Models.ChatMessage> ?? new List<OmnitakSupportHub.Models.ChatMessage>();
    var timeline = ViewBag.Timeline as List<OmnitakSupportHub.Models.TicketTimeline> ?? new List<OmnitakSupportHub.Models.TicketTimeline>();
    var availableStatuses = ViewBag.AvailableStatuses as List<OmnitakSupportHub.Models.Status> ?? new List<OmnitakSupportHub.Models.Status>();
    var availablePriorities = ViewBag.AvailablePriorities as List<OmnitakSupportHub.Models.Priority> ?? new List<OmnitakSupportHub.Models.Priority>();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Ticket #@Model.TicketID</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">

    <style>
        :root {
            --primary-blue: #2563eb;
            --success-green: #16a34a;
            --warning-orange: #ea580c;
            --danger-red: #dc2626;
            --info-cyan: #0891b2;
            --light-gray: #f8fafc;
            --medium-gray: #64748b;
            --dark-gray: #334155;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --hover-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        body {
            background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .ticket-header {
            background: linear-gradient(135deg, var(--primary-blue) 0%, #1d4ed8 100%);
            color: white;
            padding: 2rem 0;
            box-shadow: var(--card-shadow);
        }

        .ticket-info-card {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 1.5rem;
        }

        .detail-card {
            background: white;
            border-radius: 16px;
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .card-header-custom {
            background: linear-gradient(135deg, var(--light-gray) 0%, #e2e8f0 100%);
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .priority-high {
            color: var(--danger-red);
        }

        .priority-medium {
            color: var(--warning-orange);
        }

        .priority-low {
            color: var(--success-green);
        }

        .status-new {
            color: var(--primary-blue);
        }

        .status-in-progress {
            color: var(--warning-orange);
        }

        .status-pending-user {
            color: var(--info-cyan);
        }

        .status-resolved {
            color: var(--success-green);
        }

        .status-closed {
            color: var(--medium-gray);
        }

        .timeline-container {
            max-height: 400px;
            overflow-y: auto;
        }

        .timeline-item {
            display: flex;
            align-items: start;
            margin-bottom: 1.5rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
        }

            .timeline-item:last-child {
                border-bottom: none;
                margin-bottom: 0;
            }

        .timeline-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 1rem;
            flex-shrink: 0;
        }

            .timeline-icon.status-change {
                background: var(--primary-blue);
                color: white;
            }

            .timeline-icon.priority-change {
                background: var(--warning-orange);
                color: white;
            }

            .timeline-icon.comment-added {
                background: var(--success-green);
                color: white;
            }

        .chat-container {
            max-height: 500px;
            overflow-y: auto;
        }

        .chat-container {
            max-height: 500px;
            overflow-y: auto;
            padding: 1rem;
        }

        .chat-message {
            background: #f8fafc;
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
            border-left: 4px solid var(--primary-blue);
            position: relative;
        }

            .chat-message.agent {
                background: #e0f2fe;
                border-left-color: var(--info-cyan);
                margin-left: 2rem;
            }

            .chat-message.customer {
                background: #f3e8ff;
                border-left-color: #8b5cf6;
                margin-right: 2rem;
            }

        .message-sender {
            font-weight: 600;
            color: var(--primary-blue);
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .message-time {
            color: var(--medium-gray);
            font-size: 0.8rem;
            position: absolute;
            top: 0.75rem;
            right: 1rem;
        }

        .action-section {
            background: #f8fafc;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .btn-action {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.25rem;
        }

        .btn-primary-custom {
            background: var(--primary-blue);
            color: white;
        }

            .btn-primary-custom:hover {
                background: #1d4ed8;
                transform: translateY(-1px);
                color: white;
            }

        .btn-success-custom {
            background: var(--success-green);
            color: white;
        }

            .btn-success-custom:hover {
                background: #15803d;
                transform: translateY(-1px);
                color: white;
            }

        .btn-warning-custom {
            background: var(--warning-orange);
            color: white;
        }

            .btn-warning-custom:hover {
                background: #c2410c;
                transform: translateY(-1px);
                color: white;
            }

        .btn-info-custom {
            background: var(--info-cyan);
            color: white;
        }

            .btn-info-custom:hover {
                background: #0e7490;
                transform: translateY(-1px);
                color: white;
            }

        .btn-danger-custom {
            background: var(--danger-red);
            color: white;
        }

            .btn-danger-custom:hover {
                background: #b91c1c;
                transform: translateY(-1px);
                color: white;
            }

        .sla-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .sla-on-track {
            background: rgba(22, 163, 74, 0.1);
            color: var(--success-green);
        }

        .sla-warning {
            background: rgba(234, 88, 12, 0.1);
            color: var(--warning-orange);
        }

        .sla-critical {
            background: rgba(220, 38, 38, 0.1);
            color: var(--danger-red);
        }

        .sla-overdue {
            background: rgba(220, 38, 38, 0.1);
            color: var(--danger-red);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100%

        {
            opacity: 1;
        }

        50% {
            opacity: 0.7;
        }

        }

        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #e2e8f0;
        }

            .info-item:last-child {
                border-bottom: none;
            }

        .info-label {
            font-weight: 600;
            color: var(--dark-gray);
        }

        .info-value {
            color: var(--medium-gray);
        }

        .notification-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            box-shadow: var(--hover-shadow);
            border-left: 4px solid var(--success-green);
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }

        @@keyframes slideIn {
            from

        {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }

        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        @@media (max-width: 768px) {
            .chat-message.agent

        {
            margin-left: 1rem;
        }

        .chat-message.customer {
            margin-right: 1rem;
        }

        .btn-action {
            width: 100%;
            justify-content: center;
            margin: 0.25rem 0;
        }

        }
    </style>
</head>
<body>
    <!-- Ticket Header -->
    <div class="ticket-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="mb-2">
                        <i class="bi bi-ticket-detailed me-2"></i>
                        Ticket #TK-@Model.TicketID.ToString("000")
                    </h1>
                    <h4 class="mb-3 opacity-90">@Model.Title</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a href="/AgentDashboard" class="text-white-50">Dashboard</a>
                            </li>
                            <li class="breadcrumb-item active text-white" aria-current="page">
                                Ticket Details
                            </li>
                        </ol>
                    </nav>
                </div>
                <div class="col-md-4">
                    <div class="ticket-info-card">
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="h5 mb-1">@(Model.Priority?.PriorityName ?? "Medium")</div>
                                <small class="opacity-75">Priority</small>
                            </div>
                            <div class="col-6">
                                <div class="h5 mb-1">@(Model.Status?.StatusName ?? "New")</div>
                                <small class="opacity-75">Status</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success fade-in">
                <i class="bi bi-check-circle me-2"></i>
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger fade-in">
                <i class="bi bi-exclamation-triangle me-2"></i>
                @TempData["ErrorMessage"]
            </div>
        }

        <div class="row">
            <!-- Left Column: Ticket Information and Actions -->
            <div class="col-lg-8">
                <!-- Ticket Details -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>
                            Ticket Information
                        </h5>
                    </div>
                    <div class="p-3">
                        <div class="info-item">
                            <span class="info-label">Description</span>
                            <span class="info-value">@Model.Description</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Category</span>
                            <span class="info-value">
                                <span class="badge bg-secondary">@(Model.Category?.CategoryName ?? "General")</span>
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Created By</span>
                            <span class="info-value">
                                <i class="bi bi-person me-1"></i>
                                @(Model.CreatedByUser?.FullName ?? "Unknown")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Created On</span>
                            <span class="info-value">
                                <i class="bi bi-calendar me-1"></i>
                                @Model.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Assigned To</span>
                            <span class="info-value">
                                <i class="bi bi-person-check me-1"></i>
                                @(Model.AssignedToUser?.FullName ?? "Unassigned")
                            </span>
                        </div>
                        @if (Model.ClosedAt.HasValue)
                        {
                            <div class="info-item">
                                <span class="info-label">Resolved On</span>
                                <span class="info-value">
                                    <i class="bi bi-check-circle me-1"></i>
                                    @Model.ClosedAt.Value.ToString("MMM dd, yyyy 'at' HH:mm")
                                </span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-lightning-charge me-2"></i>
                            Quick Actions
                        </h5>
                    </div>
                    <div class="p-3">
                        <div class="action-section">
                            <h6 class="mb-3">Status Management</h6>
                            <div class="d-flex flex-wrap gap-2">
                                @if (Model.Status?.StatusName == "New")
                                {
                                    <form asp-action="UpdateStatus" asp-controller="AgentDashboard" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ticketId" value="@Model.TicketID" />
                                        <input type="hidden" name="newStatus" value="In Progress" />
                                        <button type="submit" class="btn-action btn-warning-custom">
                                            <i class="bi bi-play-circle"></i>
                                            Start Work
                                        </button>
                                    </form>
                                }
                                else if (Model.Status?.StatusName == "In Progress")
                                {
                                    <form asp-action="UpdateStatus" asp-controller="AgentDashboard" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ticketId" value="@Model.TicketID" />
                                        <input type="hidden" name="newStatus" value="Pending User" />
                                        <button type="submit" class="btn-action btn-info-custom">
                                            <i class="bi bi-clock"></i>
                                            Pending User
                                        </button>
                                    </form>

                                    <form asp-action="UpdateStatus" asp-controller="AgentDashboard" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ticketId" value="@Model.TicketID" />
                                        <input type="hidden" name="newStatus" value="Resolved" />
                                        <button type="submit" class="btn-action btn-success-custom">
                                            <i class="bi bi-check-circle"></i>
                                            Mark Resolved
                                        </button>
                                    </form>
                                }
                                else if (Model.Status?.StatusName == "Pending User")
                                {
                                    <form asp-action="UpdateStatus" asp-controller="AgentDashboard" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ticketId" value="@Model.TicketID" />
                                        <input type="hidden" name="newStatus" value="In Progress" />
                                        <button type="submit" class="btn-action btn-warning-custom">
                                            <i class="bi bi-arrow-clockwise"></i>
                                            Resume Work
                                        </button>
                                    </form>
                                }

                                @if (Model.Status?.StatusName != "Closed" && Model.Status?.StatusName != "Resolved")
                                {
                                    <!-- Custom Status Dropdown -->
                                    <div class="dropdown">
                                        <button class="btn-action btn-primary-custom dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="bi bi-gear"></i>
                                            Change Status
                                        </button>
                                        <ul class="dropdown-menu">
                                            @foreach (var status in availableStatuses)
                                            {
                                                @if (status.StatusName != Model.Status?.StatusName)
                                                {
                                                    <li>
                                                        <form asp-action="UpdateStatus" asp-controller="AgentDashboard" method="post" class="d-inline">
                                                            @Html.AntiForgeryToken()
                                                            <input type="hidden" name="ticketId" value="@Model.TicketID" />
                                                            <input type="hidden" name="newStatus" value="@status.StatusName" />
                                                            <button type="submit" class="dropdown-item">@status.StatusName</button>
                                                        </form>
                                                    </li>
                                                }
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="action-section">
                            <h6 class="mb-3">Priority Management</h6>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var priority in availablePriorities)
                                {
                                    @if (priority.PriorityName != Model.Priority?.PriorityName)
                                    {
                                        <form asp-action="UpdatePriority" asp-controller="AgentDashboard" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="ticketId" value="@Model.TicketID" />
                                            <input type="hidden" name="priority" value="@priority.PriorityName" />
                                            <button type="submit" class="btn-action @(priority.PriorityName == "High" ? "btn-danger-custom" : priority.PriorityName == "Medium" ? "btn-warning-custom" : "btn-success-custom")">
                                                <i class="bi bi-flag"></i>
                                                @priority.PriorityName Priority
                                            </button>
                                        </form>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Communication -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-chat-left-text me-2"></i>
                            Communication (@chatMessages.Count messages)
                        </h5>
                    </div>

                    @if (chatMessages.Any())
                    {
                        <div class="chat-container">
                            @foreach (var message in chatMessages.OrderBy(m => m.SentAt))
                            {
                                var isAgent = message.User?.Role?.RoleName == "Support Agent" || message.User?.Role?.RoleName == "Support Manager";
                                <div class="chat-message @(isAgent ? "agent" : "customer")">
                                    <div class="message-sender">
                                        @(message.User?.FullName ?? "Unknown")
                                        @if (isAgent)
                                        {
                                            <span class="badge bg-primary ms-1">Agent</span>
                                        }
                                    </div>
                                    <div class="message-time">@message.SentAt.ToString("MMM dd, HH:mm")</div>
                                    <div class="mt-2">@message.Message</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-chat-left fs-1 mb-2"></i>
                            <p>No messages yet. Start the conversation!</p>
                        </div>
                    }

                    <!-- Add Message Form -->
                    <div class="p-3 border-top">
                        <form asp-action="AddComment" asp-controller="AgentDashboard" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="ticketId" value="@Model.TicketID" />
                            <div class="input-group">
                                <textarea name="message"
                                          class="form-control"
                                          rows="3"
                                          placeholder="Type your message here..."
                                          required></textarea>
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-send"></i>
                                    Send
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Right Column: Timeline and SLA -->
            <div class="col-lg-4">
                <!-- SLA Information -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-stopwatch me-2"></i>
                            SLA Information
                        </h5>
                    </div>
                    <div class="p-3">
                        @{
                            var slaHours = Model.Priority?.PriorityName switch
                            {
                                "High" => 4,
                                "Medium" => 24,
                                "Low" => 72,
                                _ => 48
                            };
                            var slaDeadline = Model.CreatedAt.AddHours(slaHours);
                            var timeRemaining = slaDeadline - DateTime.UtcNow;
                            var isOverdue = timeRemaining.TotalHours <= 0;
                            var isCritical = timeRemaining.TotalHours <= slaHours * 0.25;
                            var isWarning = timeRemaining.TotalHours <= slaHours * 0.5;

                            string slaStatus, slaClass;
                            if (Model.Status?.StatusName == "Resolved" || Model.Status?.StatusName == "Closed")
                            {
                                slaStatus = Model.ClosedAt <= slaDeadline ? "Met" : "Missed";
                                slaClass = slaStatus == "Met" ? "sla-on-track" : "sla-overdue";
                            }
                            else if (isOverdue)
                            {
                                slaStatus = "Overdue";
                                slaClass = "sla-overdue";
                            }
                            else if (isCritical)
                            {
                                slaStatus = "Critical";
                                slaClass = "sla-critical";
                            }
                            else if (isWarning)
                            {
                                slaStatus = "Warning";
                                slaClass = "sla-warning";
                            }
                            else
                            {
                                slaStatus = "On Track";
                                slaClass = "sla-on-track";
                            }
                        }

                        <div class="text-center mb-3">
                            <div class="sla-status @slaClass">
                                <i class="bi bi-clock me-1"></i>
                                @slaStatus
                            </div>
                        </div>

                        <div class="info-item">
                            <span class="info-label">SLA Target</span>
                            <span class="info-value">@slaHours hours</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Deadline</span>
                            <span class="info-value">@slaDeadline.ToString("MMM dd, HH:mm")</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Time Remaining</span>
                            <span class="info-value">
                                @if (isOverdue)
                                {
                                    var overdue = DateTime.UtcNow - slaDeadline;
                                    <span class="text-danger">
                                        Overdue by @((int)overdue.TotalHours)h @overdue.Minutes.ToString("00")m
                                    </span>
                                }
                                else
                                {
                                    <span class="@(isCritical ? "text-danger" : isWarning ? "text-warning" : "text-success")">
                                        @((int)timeRemaining.TotalHours)h @timeRemaining.Minutes.ToString("00")m
                                    </span>
                                }
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Activity Timeline -->
                <div class="detail-card fade-in">
                    <div class="card-header-custom">
                        <h5 class="mb-0">
                            <i class="bi bi-activity me-2"></i>
                            Activity Timeline
                        </h5>
                    </div>

                    @if (timeline.Any())
                    {
                        <div class="timeline-container p-3">
                            @foreach (var activity in timeline)
                            {
                                <div class="timeline-item">
                                    <div class="timeline-icon status-change">
                                        <i class="bi bi-arrow-right"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-bold">Status Update</div>
                                        <div class="text-muted small">
                                            @activity.OldStatus → @activity.NewStatus
                                        </div>
                                        <div class="text-muted small">
                                            <i class="bi bi-clock me-1"></i>
                                            @activity.ChangeTime.ToString("MMM dd, yyyy 'at' HH:mm")
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-activity fs-1 mb-2"></i>
                            <p>No activity recorded yet.</p>
                        </div>
                    }
                </div>

                <!-- Back to Dashboard -->
                <div class="detail-card fade-in">
                    <div class="p-3 text-center">
                        <a href="/AgentDashboard" class="btn-action btn-primary-custom w-100">
                            <i class="bi bi-arrow-left"></i>
                            Back to Dashboard
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-scroll chat to bottom
            const chatContainer = document.querySelector('.chat-container');
            if (chatContainer) {
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }

            // Auto-resize textarea
            const textarea = document.querySelector('textarea[name="message"]');
            if (textarea) {
                textarea.addEventListener('input', function() {
                    this.style.height = 'auto';
                    this.style.height = Math.min(this.scrollHeight, 120) + 'px';
                });
            }

            // Form submission with loading state
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', function() {
                    const submitBtn = this.querySelector('button[type="submit"]');
                    if (submitBtn) {
                        submitBtn.disabled = true;
                        const originalText = submitBtn.innerHTML;
                        submitBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Processing...';

                        setTimeout(() => {
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = originalText;
                        }, 3000);
                    }
                });
            });

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 'Enter':
                            e.preventDefault();
                            textarea?.focus();
                            break;
                        case 'b':
                            e.preventDefault();
                            window.location.href = '/AgentDashboard';
                            break;
                    }
                }
            });

            // Auto-refresh timeline every 30 seconds
            setInterval(() => {
                // In a real application, you might want to fetch updates via AJAX
                // For now, we'll just show a subtle indication that we're checking for updates
                const timelineHeader = document.querySelector('.detail-card h5');
                if (timelineHeader) {
                    timelineHeader.style.opacity = '0.7';
                    setTimeout(() => {
                        timelineHeader.style.opacity = '1';
                    }, 500);
                }
            }, 30000);

            // Focus message input when page loads
            if (textarea) {
                textarea.focus();
            }
        });

        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification-toast border-${type}`;
            notification.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="bi bi-check-circle me-2 text-${type}"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
    </script>
</body>
</html>